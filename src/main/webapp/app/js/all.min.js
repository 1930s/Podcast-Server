angular.module("podcastApp",["podcast.controller","podcast.filters","podcast.services","podcast.partial","ngRoute","cfp.hotkeys","restangular","AngularStomp","LocalStorageModule","ngAnimate","truncate","ui.bootstrap","angular-loading-bar","ngTagsInput","notification"]).config(["$routeProvider",function(t){var n=[["h","Goto Home",function(t){t.preventDefault(),window.location.href="#/items"}],["s","Goto Search",function(t){t.preventDefault(),window.location.href="#/item/search"}],["p","Goto Podcast List",function(t){t.preventDefault(),window.location.href="#/podcasts"}],["d","Goto Download List",function(t){t.preventDefault(),window.location.href="#/download"}]];t.when("/podcasts",{templateUrl:"html/podcasts-list.html",controller:"PodcastsListCtrl",hotkeys:n}).when("/podcast/add",{templateUrl:"html/podcast-add.html",controller:"PodcastAddCtrl",hotkeys:n}).when("/podcast/:podcastId",{templateUrl:"html/podcast-detail.html",controller:"PodcastDetailCtrl",hotkeys:[["r","Refresh","refreshItems()"],["f","Force Refresh","refresh()"],["l","List of Items","tabs[0].active = true"],["m","Modification of Podcast","tabs[1].active = true"]].concat(n)}).when("/items",{templateUrl:"html/items-list.html",controller:"ItemsListCtrl",reloadOnSearch:!1,hotkeys:[["right","Next page","currentPage = currentPage+1; changePage();"],["left","Previous page","currentPage = currentPage-1; changePage();"]].concat(n)}).when("/item/search",{templateUrl:"html/items-search.html",controller:"ItemsSearchCtrl",reloadOnSearch:!1,hotkeys:[["right","Next page","currentPage = currentPage+1; changePage();"],["left","Previous page","currentPage = currentPage-1; changePage();"]].concat(n)}).when("/item/:itemId",{templateUrl:"html/item-detail.html",controller:"ItemDetailCtrl",hotkeys:n}).when("/download",{templateUrl:"html/download.html",controller:"DownloadCtrl",hotkeys:n}).otherwise({redirectTo:"/items"})}]).config(["cfpLoadingBarProvider",function(t){t.includeSpinner=!1}]).config(["RestangularProvider",function(t){t.setBaseUrl("/api/")}]),angular.module("podcast.controller",[]),angular.module("podcast.filters",[]).filter("htmlToPlaintext",function(){return function(t){return String(t).replace(/<[^>]+>/gm,"")}});var podcastServices=angular.module("podcast.services",[]);podcastServices.factory("DonwloadManager",["Restangular",function(t){var n={};return n.download=function(n){t.one("item").customGET(n.id+"/addtoqueue")},n.stopDownload=function(n){t.one("task").customPOST(n.id,"downloadManager/stopDownload")},n.toggleDownload=function(n){t.one("task").customPOST(n.id,"downloadManager/toogleDownload")},n.stopAllDownload=function(){t.one("task").customGET("downloadManager/stopAllDownload")},n.pauseAllDownload=function(){t.one("task").customGET("downloadManager/pauseAllDownload")},n.restartAllCurrentDownload=function(){t.one("task").customGET("downloadManager/restartAllCurrentDownload")},n.removeFromQueue=function(n){t.one("task").customDELETE("downloadManager/queue/"+n.id)},n.updateNumberOfSimDl=function(n){t.one("task").customPOST(n,"downloadManager/limit")},n.dontDonwload=function(n){t.one("task").customDELETE("downloadManager/queue/"+n.id+"/andstop")},n}]),angular.module("podcast.controller").controller("DownloadCtrl",["$scope","$http","$routeParams","Restangular","ngstomp","DonwloadManager","$log","Notification","$window",function(t,n,e,o,a,l,s,i,c){t.items=o.all("task/downloadManager/downloading").getList().$object,t.waitingitems=[],t.activeNotification={state:"Notification"in c&&"granted"!=c.Notification.permission,manuallyactivate:i.requestPermission},t.refreshWaitingItems=function(){var n=t.waitingitems||o.all("task/downloadManager/queue");n.getList().then(function(n){t.waitingitems=n})},o.one("task/downloadManager/limit").get().then(function(n){t.numberOfSimDl=parseInt(n)}),t.getTypeFromStatus=function(t){return"Paused"===t.status?"warning":"info"},t.updateNumberOfSimDl=l.updateNumberOfSimDl,t.download=l.download,t.stopDownload=l.stopDownload,t.toggleDownload=l.toggleDownload,t.stopAllDownload=l.stopAllDownload,t.pauseAllDownload=l.pauseAllDownload,t.restartAllCurrentDownload=l.restartAllCurrentDownload,t.removeFromQueue=l.removeFromQueue,t.dontDonwload=l.dontDonwload,t.wsClient=a("/download",SockJS),t.wsClient.connect("user","password",function(){t.wsClient.subscribe("/topic/download",function(n){var e=JSON.parse(n.body),o=_.find(t.items,{id:e.id});switch(e.status){case"Started":case"Paused":o?_.assign(o,e):t.items.push(e);break;case"Finish":new i("Téléchargement terminé",{body:e.title,icon:e.cover.url,delay:5e3});case"Stopped":o&&_.remove(t.items,function(t){return t.id===o.id})}}),t.wsClient.subscribe("/app/waitingList",function(n){t.waitingitems=JSON.parse(n.body)}),t.wsClient.subscribe("/topic/waitingList",function(n){var e=JSON.parse(n.body);angular.forEach(e,function(n){var e=_.findIndex(t.waitingitems,{id:n.id});-1===e&&t.waitingitems.push(n)}),angular.forEach(t.waitingitems,function(n,o){var a=_.findIndex(e,{id:n.id});-1===a&&t.waitingitems.splice(o,1)})})}),t.$on("$destroy",function(){t.wsClient.disconnect(function(){})})}]),angular.module("podcast.controller").controller("ItemDetailCtrl",["$scope","$routeParams","$http","Restangular","ngstomp","DonwloadManager",function(t,n,e,o,a,l){var s=n.itemId;o.one("item",s).get().then(function(n){t.item=n}).then(function(){t.item.one("podcast").get().then(function(n){t.item.podcast=n,t.wsClient=a("/download",SockJS),t.wsClient.connect("user","password",function(){t.wsClient.subscribe("/topic/podcast/"+n.id,function(n){var e=JSON.parse(n.body);e.id==t.item.id&&_.assign(t.item,e)})}),t.$on("$destroy",function(){t.wsClient.disconnect(function(){})})})}),t.remove=function(n){o.one("item",n.id).remove().then(function(){t.podcast.items=_.reject(t.podcast.items,function(t){return t.id==n.id})})},t.download=l.download,t.stopDownload=l.stopDownload,t.toggleDownload=l.toggleDownload}]),angular.module("podcast.controller").controller("ItemsListCtrl",["$scope","$http","$routeParams","$cacheFactory","Restangular","ngstomp","DonwloadManager","$log","$location",function(t,n,e,o,a,l,s,i,c){var r=o.get("paginationCache")||o("paginationCache"),d=12;t.changePage=function(){t.currentPage=t.currentPage<1?1:t.currentPage>Math.ceil(t.totalItems/d)?Math.ceil(t.totalItems/d):t.currentPage,a.one("item/pagination").get({size:d,page:t.currentPage-1,direction:"DESC",properties:"pubdate"}).then(function(n){t.items=n.content,t.totalItems=parseInt(n.totalElements),r.put("currentPage",t.currentPage),c.search("page",t.currentPage)})},t.$on("$routeUpdate",function(){t.currentPage!==c.search().page&&(t.currentPage=c.search().page,t.changePage())}),t.totalItems=Number.MAX_VALUE,t.maxSize=10,t.currentPage=r.get("currentPage")||1,t.changePage(),t.download=s.download,t.stopDownload=s.stopDownload,t.toggleDownload=s.toggleDownload,t.wsClient=l("/download",SockJS),t.wsClient.connect("user","password",function(){t.wsClient.subscribe("/topic/download",function(n){var e=JSON.parse(n.body),o=_.find(t.items,{id:e.id});o&&_.assign(o,e)})}),t.$on("$destroy",function(){t.wsClient.disconnect(function(){})})}]),angular.module("podcast.controller").controller("ItemsSearchCtrl",["$scope","$http","$routeParams","$cacheFactory","$location","Restangular","ngstomp","DonwloadManager",function(t,n,e,o,a,l,s,i){var c=l.all("tag"),r=12;t.loadTags=function(t){return c.post(null,{name:t})};var d=o.get("paginationCache")||o("paginationCache");t.changePage=function(){t.currentPage=t.currentPage<1?1:t.currentPage>Math.ceil(t.totalItems/r)?Math.ceil(t.totalItems/r):t.currentPage,l.one("item/pagination/tags").post(null,{tags:t.searchTags,size:r,page:t.currentPage-1,direction:"DESC",properties:"pubdate"}).then(function(n){t.items=n.content,t.totalItems=parseInt(n.totalElements),d.put("currentSearchPage",t.currentPage),a.search("page",t.currentPage)})},t.$on("$routeUpdate",function(){t.currentPage!==a.search().page&&(t.currentPage=a.search().page,t.changePage())}),t.totalItems=Number.MAX_VALUE,t.maxSize=10,t.currentPage=d.get("currentSearchPage")||1,t.changePage(),t.download=i.download,t.stopDownload=i.stopDownload,t.toggleDownload=i.toggleDownload,t.wsClient=s("/download",SockJS),t.wsClient.connect("user","password",function(){t.wsClient.subscribe("/topic/download",function(n){var e=JSON.parse(n.body),o=_.find(t.items,{id:e.id});o&&_.assign(o,e)})}),t.$on("$destroy",function(){t.wsClient.disconnect(function(){})})}]),angular.module("podcast.controller").controller("PodcastAddCtrl",["$scope","Restangular",function(t,n){var e=n.all("podcast"),o=n.all("tag");t.podcast={hasToBeDeleted:!0,cover:{height:200,width:200}},t.loadTags=function(t){return o.post(null,{name:t})},t.changeType=function(){t.podcast.type=/beinsports\.fr/i.test(t.podcast.url)?"BeInSports":/canalplus\.fr/i.test(t.podcast.url)?"CanalPlus":/jeuxvideo\.fr/i.test(t.podcast.url)?"JeuxVideoFR":/parleys\.com/i.test(t.podcast.url)?"Parleys":/youtube\.com/i.test(t.podcast.url)?"Youtube":t.podcast.url.length>0?"RSS":"Send"},t.save=function(){e.post(t.podcast)}}]),function(t){try{t=angular.module("podcast.partial")}catch(n){t=angular.module("podcast.partial",[])}t.run(["$templateCache",function(t){t.put("html/download.html",'<!--<div class="jumbotron">-->\n    <!--<div class="container">-->\n        <!--<h1>Téléchargement</h1>-->\n    <!--</div>-->\n<!--</div>-->\n\n<div class="container downloadList">\n\n    <div class="row form-horizontal" style="margin-top: 15px;">\n        <div class="col-xs-offset-1 col-md-offset-1 col-sm-offset-1 col-lg-offset-1 form-group col-md-6 col-lg-6 col-xs-6 col-sm-6 ">\n            <label class="pull-left control-label">Téléchargements simultanés</label>\n            <div class="col-md-3 col-lg-3 col-xs-3 col-sm-3">\n                <input ng-model="numberOfSimDl" ng-change="updateNumberOfSimDl(numberOfSimDl)" type="number" class="form-control" placeholder="Number of download">\n            </div>\n        </div>\n        <span>\n            <a ng-show="activeNotification.state" ng-click="activeNotification.manuallyactivate()" class="btn btn-primary">Activer Notification</a>\n        </span>\n        <div class="btn-group pull-right">\n            <button ng-click="restartAllDownload()" type="button" class="btn btn-default">Démarrer</button>\n            <button ng-click="pauseAllDownload()" type="button" class="btn btn-default">Pause</button>\n            <button ng-click="stopAllDownload()" type="button" class="btn btn-default">Stop</button>\n        </div>\n    </div>\n    <div class="media"  ng-repeat="item in items track by item.id | orderBy:progression" >\n\n        <div class="buttonList pull-right">\n            <br/>\n            <button ng-click="toggleDownload(item)" type="button" class="btn btn-primary btn-sm"><i class="glyphicon glyphicon-play"></i><i class="glyphicon glyphicon-pause"></i></button>\n            <button ng-click="stopDownload(item)" type="button" class="btn btn-danger btn-sm"><span class="glyphicon glyphicon-stop"></span></button>\n        </div>\n\n        <a class="pull-left" ng-href="#/item/{{item.id}}">\n            <img ng-src="{{item.cover.url}}" width="100" height="100" style="">\n        </a>\n\n        <div class="media-body">\n            <h5 class="media-heading">{{item.title | characters:100}}</h5>\n            <br/>\n            <progressbar class="progress-striped active" animate="false" value="item.progression" type="{{ getTypeFromStatus(item) }}">{{item.progression}}%</progressbar>\n        </div>\n    </div>\n\n\n    <br/>\n\n    <accordion close-others="true">\n        <accordion-group heading="Liste d\'attente" is-open="false">\n\n            <div class="media"  ng-repeat="item in waitingitems" >\n\n                <div class="pull-right">\n                    <button ng-click="removeFromQueue(item)" type="button" class="btn btn-primary btn-sm"><i class="glyphicon glyphicon-minus"></i></button>\n                    <button ng-click="dontDonwload(item)" type="button" class="btn btn-danger btn-sm"><i class="glyphicon glyphicon-stop"></i></button>\n                </div>\n\n                <a class="pull-left" ng-href="#/item/{{item.id}}">\n                    <img ng-src="{{item.cover.url}}" width="100" height="100" style="">\n                </a>\n\n                <div class="media-body">\n                    <h4 class="media-heading">{{item.title | characters:100}}</h4>\n                </div>\n            </div>\n\n        </accordion-group>\n    </accordion>\n\n\n</div>')}])}(),function(t){try{t=angular.module("podcast.partial")}catch(n){t=angular.module("podcast.partial",[])}t.run(["$templateCache",function(t){t.put("html/item-detail.html",'\n<div class="container">\n\n    <br/>\n    <ol class="breadcrumb">\n        <li><a href="/#/podcasts">Podcasts</a></li>\n        <li><a ng-href="/#/podcast/{{ item.podcast.id }}"> {{ item.podcast.title }}</a></li>\n        <li class="active">{{ item.title }}</li>\n    </ol>\n\n    <div>\n        <div class="col-xs-12 col-sm-12 col-md-3 col-lg-3">\n            <div class="thumbnail">\n                <a ng-href="{{ item.localUrl || item.url }}">\n                    <img class="center-block" ng-src="{{item.cover.url}}" width="200" height="200">\n                </a>\n\n                <div class="caption">\n\n                    <div class="buttonList text-center">\n                        <!-- Téléchargement en cours -->\n                                <span ng-if="item.status == \'Started\' || item.status == \'Paused\'" >\n                                    <button ng-click="toggleDownload(item)" type="button" class="btn btn-primary "><i class="glyphicon glyphicon-play"></i><i class="glyphicon glyphicon-pause"></i></button>\n                                    <button ng-click="stopDownload(item)" type="button" class="btn btn-danger"><span class="glyphicon glyphicon-stop"></span></button>\n                                </span>\n\n                        <!-- Lancer le téléchargement -->\n                        <button ng-click="download(item)" ng-if="(item.status != \'Started\' && item.status != \'Paused\' ) && item.localUrl == null " type="button" class="btn btn-primary"><span class="glyphicon glyphicon-save"></span></button>\n\n                        <!-- Accéder au fichier -->\n                        <a ng-href="{{ item.url }}" ng-if="item.localUrl == null" type="button" class="btn btn-info"><span class="glyphicon glyphicon-globe"></span></a>\n                        <a ng-href="{{ item.localUrl }}" ng-if="item.localUrl != null" type="button" class="btn btn-success"><span class="glyphicon glyphicon-play"></span></a>\n\n                        <!-- Supprimer l\'item -->\n                        <button ng-click="remove(item)" ng-if="(item.status != \'Started\' && item.status != \'Paused\' )" type="button" class="btn btn-danger"><span class="glyphicon glyphicon-remove"></span></button>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div class="col-xs-12 col-sm-12 col-md-9 col-lg-9">\n            <br/>\n            <div class="panel panel-default">\n                <div class="panel-heading">\n                    <h3 class="panel-title">{{ item.title }}</h3>\n                </div>\n                <div class="panel-body">\n                    {{ item.description | htmlToPlaintext }}\n                </div>\n                <div class="panel-footer">Date de publication : <strong>{{item.pubdate | date : \'dd/MM/yyyy à HH:mm\' }}</strong></div>\n            </div>\n        </div>\n\n    </div>\n</div>\n\n')}])}(),function(t){try{t=angular.module("podcast.partial")}catch(n){t=angular.module("podcast.partial",[])}t.run(["$templateCache",function(t){t.put("html/items-list.html",'<div class="container item-listing">\n    <!--<div class="col-xs-11 col-sm-11 col-lg-11 col-md-11">-->\n    <div class="text-center">\n        <pagination items-per-page="12" max-size="10" boundary-links="true" total-items="totalItems" ng-model="currentPage" ng-change="changePage()" class="pagination pagination-centered" previous-text="&lsaquo;" next-text="&rsaquo;" first-text="&laquo;" last-text="&raquo;"></pagination>\n    </div>\n        <div class="row">\n            <div ng-repeat="item in items track by item.id" class="col-xs-6 col-sm-4 col-md-3 col-lg-3 itemInList">\n                <div class="box">\n                    <div class="">\n                        <a ng-href="#/item/{{item.id}}" >\n                            <img ng-src="{{ item.cover.url }}" alt="" class="img-rounded img-responsive" />\n                        </a>\n                    </div>\n                    <div class="text-center clearfix itemTitle" >\n                        <p>\n                            {{ item.title | characters:50 }}\n                        </p>\n                    </div>\n                    <div class="text-center row-button">\n                        <span ng-if="item.status == \'Started\' || item.status == \'Paused\'" >\n                                        <button ng-click="toggleDownload(item)" type="button" class="btn btn-primary "><i class="glyphicon glyphicon-play"></i><i class="glyphicon glyphicon-pause"></i></button>\n                                        <button ng-click="stopDownload(item)" type="button" class="btn btn-danger"><span class="glyphicon glyphicon-stop"></span></button>\n                                    </span>\n\n                        <button ng-click="download(item)" ng-if="(item.status != \'Started\' && item.status != \'Paused\' ) && item.localUrl == null " type="button" class="btn btn-primary"><span class="glyphicon glyphicon-save"></span></button>\n                        <a href="{{ item.proxyURL }}" ng-if="item.localUrl == null" type="button" class="btn btn-info"><span class="glyphicon glyphicon-globe"></span></a>\n\n                        <a href="{{ item.proxyURL }}" ng-if="item.localUrl != null" type="button" class="btn btn-success"><span class="glyphicon glyphicon-play"></span></a>\n                        <button ng-click="remove(item)" ng-if="item.localUrl != null" type="button" class="btn btn-danger"><span class="glyphicon glyphicon-remove"></span></button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    <!--</div>-->\n    <div class="text-center row">\n        <pagination items-per-page="12" max-size="10" boundary-links="true" total-items="totalItems" ng-model="currentPage" ng-change="changePage()" class="pagination pagination-centered" previous-text="&lsaquo;" next-text="&rsaquo;" first-text="&laquo;" last-text="&raquo;"></pagination>\n    </div>\n</div>\n')}])}(),function(t){try{t=angular.module("podcast.partial")}catch(n){t=angular.module("podcast.partial",[])}t.run(["$templateCache",function(t){t.put("html/items-search.html",'<div class="container item-listing">\n    <!--<div class="col-xs-11 col-sm-11 col-lg-11 col-md-11">-->\n    <div class="col-sm-12">\n        <tags-input placeholder="Search by Tags" add-from-autocomplete-only="true" ng-model="searchTags" display-property="name" min-length="1" class="bootstrap" on-tag-added="currentSearchPage=1; changePage()" on-tag-removed="currentPage=1; changePage()">\n            <auto-complete source="loadTags($query)" min-length="2"></auto-complete>\n        </tags-input>\n    </div>\n\n    <div class="text-center">\n        <pagination items-per-page="12" max-size="10" boundary-links="true" total-items="totalItems" ng-model="currentPage" ng-change="changePage()" class="pagination pagination-centered" previous-text="&lsaquo;" next-text="&rsaquo;" first-text="&laquo;" last-text="&raquo;"></pagination>\n    </div>\n        <div class="row">\n            <div ng-repeat="item in items track by item.id" class="col-xs-6 col-sm-4 col-md-3 col-lg-3 itemInList">\n                <div class="box">\n                    <div class="">\n                        <a ng-href="#/item/{{item.id}}" >\n                            <img ng-src="{{ item.cover.url }}" alt="" class="img-rounded img-responsive" />\n                        </a>\n                    </div>\n                    <div class="text-center clearfix itemTitle" >\n                        <p>\n                            {{ item.title | characters:50 }}\n                        </p>\n                    </div>\n                    <div class="text-center row-button">\n                        <span ng-if="item.status == \'Started\' || item.status == \'Paused\'" >\n                                        <button ng-click="toggleDownload(item)" type="button" class="btn btn-primary "><i class="glyphicon glyphicon-play"></i><i class="glyphicon glyphicon-pause"></i></button>\n                                        <button ng-click="stopDownload(item)" type="button" class="btn btn-danger"><span class="glyphicon glyphicon-stop"></span></button>\n                                    </span>\n\n                        <button ng-click="download(item)" ng-if="(item.status != \'Started\' && item.status != \'Paused\' ) && item.localUrl == null " type="button" class="btn btn-primary"><span class="glyphicon glyphicon-save"></span></button>\n                        <a href="{{ item.proxyURL }}" ng-if="item.localUrl == null" type="button" class="btn btn-info"><span class="glyphicon glyphicon-globe"></span></a>\n\n                        <a href="{{ item.proxyURL }}" ng-if="item.localUrl != null" type="button" class="btn btn-success"><span class="glyphicon glyphicon-play"></span></a>\n                        <button ng-click="remove(item)" ng-if="item.localUrl != null" type="button" class="btn btn-danger"><span class="glyphicon glyphicon-remove"></span></button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    <!--</div>-->\n    <div class="text-center row">\n        <pagination items-per-page="12" max-size="10" boundary-links="true" total-items="totalItems" ng-model="currentPage" ng-change="changePage()" class="pagination pagination-centered" previous-text="&lsaquo;" next-text="&rsaquo;" first-text="&laquo;" last-text="&raquo;"></pagination>\n    </div>\n</div>\n')}])}(),function(t){try{t=angular.module("podcast.partial")}catch(n){t=angular.module("podcast.partial",[])}t.run(["$templateCache",function(t){t.put("html/podcast-add.html",'<div class="jumbotron">\n    <div class="container">\n        <h1>Ajouter un Podcast</h1>\n    </div>\n</div>\n\n<div class="container">\n    <form class="form-horizontal" role="form">\n        <div class="form-group">\n            <label for="title" class="col-sm-1 control-label">Titre</label>\n\n            <div class="col-sm-10">\n                <input type="text" class="form-control" id="title" ng-model="podcast.title" required placeholder="Titre">\n            </div>\n        </div>\n        <div class="form-group">\n            <label for="url" class="col-sm-1 control-label">URL</label>\n\n            <div class="col-sm-10">\n                <input type="url" class="form-control" id="url" ng-model="podcast.url" required placeholder="url" ng-change="changeType()">\n            </div>\n        </div>\n        <div class="form-group">\n            <div class="checkbox col-sm-offset-2">\n                <label>\n                    <input type="checkbox" ng-model="podcast.hasToBeDeleted" required> Suppression Auto\n                </label>\n            </div>\n        </div>\n\n        <div class="form-group">\n            <label for="url" class="col-sm-1 control-label">Tags</label>\n            <div class="col-sm-10">\n                <tags-input ng-model="podcast.tags" display-property="name" min-length="1" class="bootstrap">\n                    <auto-complete source="loadTags($query)" min-length="2"></auto-complete>\n                </tags-input>\n            </div>\n        </div>\n\n\n        <div class="form-group">\n            <label for="height" class="col-sm-1 control-label">Type</label>\n\n            <div class="col-sm-10">\n                <select class="form-control" ng-model="podcast.type">\n                    <option value="BeInSports">Be In Sports</option>\n                    <option value="CanalPlus">Canal+</option>\n                    <option value="JeuxVideoFR">Jeux Video Fr</option>\n                    <option value="Parleys">Parleys</option>\n                    <option value="RSS">RSS</option>\n                    <option value="send">Send</option>\n                    <option value="Youtube">Youtube</option>\n                </select>\n            </div>\n        </div>\n        <div class="col-md-2 col-md-offset-1">\n            <img ng-src="{{ podcast.cover.url }}" class="img-thumbnail" bs-Holder>\n        </div>\n        <div class="col-md-9">\n            <div class="form-group">\n                <label for="url" class="col-sm-2 control-label">URL</label>\n\n                <div class="col-sm-9">\n                    <input class="form-control" id="url" ng-model="podcast.cover.url" required placeholder="url">\n                </div>\n            </div>\n            <div class="form-group">\n                <label for="width" class="col-sm-2 control-label">Lageur</label>\n\n                <div class="col-sm-3">\n                    <input type="number" class="form-control" id="width" ng-model="podcast.cover.width" required\n                           placeholder="url">\n                </div>\n            </div>\n            <div class="form-group">\n                <label for="height" class="col-sm-2 control-label">Hauteur</label>\n\n                <div class="col-sm-3">\n                    <input type="number" class="form-control" id="height" ng-model="podcast.cover.height" required\n                           placeholder="url">\n                </div>\n            </div>\n        </div>\n\n\n        <div class="form-group">\n            <div class="col-sm-offset-2 col-sm-10">\n                <button ng-click="save()" class="btn btn-default">Sauvegarder</button>\n            </div>\n        </div>\n    </form>\n</div>\n\n\n\n')}])}(),function(t){try{t=angular.module("podcast.partial")}catch(n){t=angular.module("podcast.partial",[])}t.run(["$templateCache",function(t){t.put("html/podcast-detail.html",'<div class="container">\n\n<br/>\n<ol class="breadcrumb">\n    <li><a href="/#/podcasts">Podcasts</a></li>\n    <li><a class="active"> {{ podcast.title }}</a></li>\n</ol>\n\n\n<div class="col-xs-12 col-sm-12 col-md-3 col-lg-3">\n    <div class="thumbnail">\n        <img ng-src="{{podcast.cover.url}}" width="{{podcast.cover.width}}" height="{{podcast.cover.height}}" alt="">\n        <div class="caption">\n            <h5 class="text-center "><strong>{{ podcast.title }}</strong></h5>\n            <p class="text-center">Nombre d\'épisode : {{podcast.items.length }}</p>\n            <div class="col-lg-12 col-sm-12 col-md-12 col-xs-12 text-center">\n                <button ng-click="refresh()" type="button" class="btn btn-default"><span class="glyphicon glyphicon-refresh"></span></button>\n                <a type="button" class="btn btn-default" href="/api/podcast/{{ podcast.id }}/rss" target="_blank">RSS</a>\n            </div>\n        </div>\n    </div>\n</div>\n<div class="col-md-8 col-xs-12 col-sm-12 col-lg-8">\n\n    <tabset>\n        <tab ng-repeat="tab in tabs" heading="{{tab.title}}" active="tab.active" disabled="tab.disabled">\n            <ng-include src="tab.templateUrl" ></ng-include>\n        </tab>\n    </tabset>\n\n\n</div>\n    </div>\n\n\n\n')}])}(),function(t){try{t=angular.module("podcast.partial")}catch(n){t=angular.module("podcast.partial",[])}t.run(["$templateCache",function(t){t.put("html/podcast-details-edition.html",'<br/>\n<accordion close-others="true">\n    <accordion-group heading="Podcast" is-open="true">\n        <form class="form-horizontal" role="form">\n            <div class="form-group">\n                <label for="title" class="col-sm-2 control-label">Titre</label>\n                <div class="col-sm-10">\n                    <input type="text" class="form-control" id="title" ng-model="podcast.title" required placeholder="Titre">\n                </div>\n            </div>\n            <div class="form-group">\n                <label for="url" class="col-sm-2 control-label">URL</label>\n                <div class="col-sm-10">\n                    <input type="url" class="form-control" id="url" ng-model="podcast.url" required placeholder="url">\n                </div>\n            </div>\n            <div class="form-group">\n                <div class="checkbox col-sm-offset-3">\n                    <label>\n                        <input type="checkbox" ng-model="podcast.hasToBeDeleted" required> Suppression Auto\n                    </label>\n                </div>\n            </div>\n            <div class="form-group">\n                <label for="url" class="col-sm-2 control-label">Tags</label>\n                <div class="col-sm-10">\n                    <tags-input ng-model="podcast.tags" display-property="name" min-length="1" class="bootstrap">\n                        <auto-complete source="loadTags($query)" min-length="2"></auto-complete>\n                    </tags-input>\n                </div>\n            </div>\n            <div class="form-group">\n                <label for="height" class="col-sm-2 control-label" >Type</label>\n                <div class="col-sm-10" >\n                    <select class="form-control" ng-model="podcast.type">\n                        <option value="BeInSports">Be In Sports</option>\n                        <option value="CanalPlus">Canal+</option>\n                        <option value="JeuxVideoFR">Jeux Video Fr</option>\n                        <option value="Parleys">Parleys</option>\n                        <option value="RSS">RSS</option>\n                        <option value="send">Send</option>\n                        <option value="Youtube">Youtube</option>\n                    </select>\n                </div>\n            </div>\n\n            <div class="form-group">\n                <div class="col-sm-offset-2 col-sm-10">\n                    <button ng-click="save()" class="btn btn-default">Sauvegarder</button>\n                </div>\n            </div>\n        </form>\n    </accordion-group>\n    <accordion-group heading="Cover">\n        <form class="form-horizontal" role="form">\n            <div class="form-group">\n                <label for="url" class="col-sm-2 control-label">URL</label>\n                <div class="col-sm-10">\n                    <input type="url" class="form-control" id="url" ng-model="podcast.cover.url" required placeholder="url">\n                </div>\n            </div>\n            <div class="form-group">\n                <label for="width" class="col-sm-2 control-label">Lageur</label>\n                <div class="col-sm-10">\n                    <input type="number" class="form-control" id="width" ng-model="podcast.cover.width" required placeholder="url">\n                </div>\n            </div>\n            <div class="form-group">\n                <label for="height" class="col-sm-2 control-label">Hauteur</label>\n                <div class="col-sm-10">\n                    <input type="number" class="form-control" id="height" ng-model="podcast.cover.height" required placeholder="url">\n                </div>\n            </div>\n\n            <div class="form-group">\n                <div class="col-sm-offset-2 col-sm-10">\n                    <button ng-click="save()" class="btn btn-default">Sauvegarder</button>\n                </div>\n            </div>\n        </form>\n    </accordion-group>\n</accordion>\n')}])}(),function(t){try{t=angular.module("podcast.partial")}catch(n){t=angular.module("podcast.partial",[])}t.run(["$templateCache",function(t){t.put("html/podcast-details-episodes.html",'\n<br/>\n\n<div class="media"  ng-repeat="item in podcast.items track by item.id | orderBy:pubdate">\n\n    <div class="buttonList pull-right">\n        <!-- Téléchargement en cours -->\n                        <span ng-if="item.status == \'Started\' || item.status == \'Paused\'" >\n                            <button ng-click="toggleDownload(item)" type="button" class="btn btn-primary "><i class="glyphicon glyphicon-play"></i><i class="glyphicon glyphicon-pause"></i></button>\n                            <button ng-click="stopDownload(item)" type="button" class="btn btn-danger"><span class="glyphicon glyphicon-stop"></span></button>\n                        </span>\n\n        <!-- Lancer le téléchargement -->\n        <button ng-click="download(item)" ng-if="(item.status != \'Started\' && item.status != \'Paused\' ) && item.localUrl == null " type="button" class="btn btn-primary"><span class="glyphicon glyphicon-save"></span></button>\n\n        <!-- Accéder au fichier -->\n        <a href="{{ item.url }}" ng-if="item.localUrl == null" type="button" class="btn btn-info"><span class="glyphicon glyphicon-globe"></span></a>\n        <a href="{{ item.localUrl }}" ng-if="item.localUrl != null" type="button" class="btn btn-success"><span class="glyphicon glyphicon-play"></span></a>\n\n        <!-- Supprimer l\'item -->\n        <button ng-click="remove(item)" ng-if="(item.status != \'Started\' && item.status != \'Paused\' )" type="button" class="btn btn-danger"><span class="glyphicon glyphicon-remove"></span></button>\n    </div>\n\n    <a class="pull-left" ng-href="#/item/{{item.id}}">\n\n        <img ng-src="{{item.cover.url}}" width="100" height="100" style="">\n\n    </a>\n    <div class="media-body">\n        <h4 class="media-heading">{{item.title | characters:60}}</h4>\n        <p class="description hidden-xs hidden-sm branch-name">{{item.description | htmlToPlaintext | characters : 130 }}</p>\n        <p><strong>{{item.pubdate | date : \'dd/MM/yyyy à HH:mm\' }}</strong></p>\n    </div>\n</div>\n\n\n\n        ')
}])}(),function(t){try{t=angular.module("podcast.partial")}catch(n){t=angular.module("podcast.partial",[])}t.run(["$templateCache",function(t){t.put("html/podcasts-list.html",'<div id="listItem" class="container" style="margin-top: 15px;">\n    <div class="row">\n        <div class="col-xs-6 col-sm-4 col-md-3 col-lg-3" ng-repeat="podcast in podcasts">\n            <div class="thumbnail">\n                <a ng-href="#/podcast/{{ podcast.id }}" >\n                    <img ng-src="{{podcast.cover.url}}" width="{{podcast.cover.width}}" height="{{podcast.cover.height}}" alt="">\n                    <div class="caption">\n                        <h5 class="text-center">{{ podcast.title }}</h5>\n                    </div>\n                </a>\n            </div>\n        </div>\n    </div>\n</div>\n\n\n')}])}(),angular.module("podcast.controller").controller("PodcastDetailCtrl",["$scope","$routeParams","Restangular","ngstomp","localStorageService","DonwloadManager","$log",function(t,n,e,o,a,l,s){var i=n.podcastId,c=e.all("tag");t.tabs=[{title:"Episodes",templateUrl:"html/podcast-details-episodes.html",active:!0},{title:"Modification",templateUrl:"html/podcast-details-edition.html",active:!1}],t.$watchGroup(["podcast","podcast.items"],function(t){a.add("podcast/"+i,t[0])}),t.podcast=a.get("podcast/"+i)||{},t.refreshItems=function(){t.podcast.getList("items").then(function(n){t.podcast.items=n})},e.one("podcast",n.podcastId).get().then(function(n){n.items=t.podcast.items||[],t.podcast=n,t.wsClient=o("/download",SockJS),t.wsClient.connect("user","password",function(){t.wsClient.subscribe("/topic/podcast/"+i,function(n){var e=JSON.parse(n.body),o=_.find(t.podcast.items,{id:e.id});_.assign(o,e)})}),t.$on("$destroy",function(){t.wsClient.disconnect(function(){})})}).then(t.refreshItems),t.remove=function(n){e.one("item",n.id).remove().then(function(){t.podcast.items=_.reject(t.podcast.items,function(t){return t.id==n.id})})},t.refresh=function(){e.one("task").customPOST(t.podcast.id,"updateManager/updatePodcast/force").then(t.refreshItems)},t.loadTags=function(t){return c.post(null,{name:t})},t.download=l.download,t.stopDownload=l.stopDownload,t.toggleDownload=l.toggleDownload,t.save=function(){var n=_.cloneDeep(t.podcast);n.items=null,t.podcast.patch(n).then(function(n){s.debug(n),_.assign(t.podcast,n)}).then(t.refreshItems)}}]),angular.module("podcast.controller").controller("PodcastsListCtrl",["$scope","Restangular","localStorageService",function(t,n,e){t.podcasts=e.get("podcastslist"),n.all("podcast").getList().then(function(n){t.podcasts=n,e.add("podcastslist",n)})}]);
//# sourceMappingURL=data:application/json;base64,